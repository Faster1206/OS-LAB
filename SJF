#include <stdio.h>
int main() {
    int n;
    // Get the number of processes from the user
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int processID[n], burstTime[n], waitingTime[n], turnAroundTime[n];

    // Get the burst times for each process
    printf("Enter Burst Time:\n");
    for (int i = 0; i < n; i++) {
        printf("p%d: ", i + 1);
        scanf("%d", &burstTime[i]);
        processID[i] = i + 1;
    }

    // Sorting burst time in increasing order for SJF
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (burstTime[i] > burstTime[j]) {
                // Swap burst time
                int temp = burstTime[i];
                burstTime[i] = burstTime[j];
                burstTime[j] = temp;
                // Swap process IDs accordingly
                temp = processID[i];
                processID[i] = processID[j];
                processID[j] = temp;
            }
        }
    }

    // Calculate waiting time
    waitingTime[0] = 0; // First process has no waiting time
    for (int i = 1; i < n; i++) {
        waitingTime[i] = waitingTime[i - 1] + burstTime[i - 1];
    }

    // Calculate turnaround time
    for (int i = 0; i < n; i++) {
        turnAroundTime[i] = burstTime[i] + waitingTime[i];
    }

    // Display the result table
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("p%d\t\t%d\t\t%d\t\t%d\n", processID[i], burstTime[i], waitingTime[i], turnAroundTime[i]);
    }

    // Calculate total waiting time and total turnaround time
    float totalWaitingTime = 0, totalTurnAroundTime = 0;
    for (int i = 0; i < n; i++) {
        totalWaitingTime += waitingTime[i];
        totalTurnAroundTime += turnAroundTime[i];
    }

    // Calculate and print average waiting time and average turnaround time
    printf("Average Waiting Time = %.6f\n", totalWaitingTime / n);
    printf("Average Turnaround Time = %.6f\n", totalTurnAroundTime / n);

    return 0;
}
